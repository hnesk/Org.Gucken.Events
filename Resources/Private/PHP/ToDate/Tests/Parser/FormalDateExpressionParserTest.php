<?php

namespace ToDate\Parser;


use ToDate\Parser\FormalDateExpressionParser;
use ToDate\Condition;

/**
 * Test class for FormalDateExpressionParser.
 * Generated by PHPUnit on 2012-02-10 at 14:12:34.
 */
class FormalDateExpressionParserTest extends \PHPUnit_Framework_TestCase {	

	
	public function testParseWithDateModulo() {
		$expression = 'DateModulo = 2012-02-12%14d';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		self::assertInstanceOf('ToDate\Condition\DateModuloOffsetCondition', $result);
		self::assertEquals($expression, (string)$result);
	}

	public function testParseWithDate() {
		$expression = 'Date = 2012-02-12';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		self::assertInstanceOf('ToDate\Condition\DateCondition', $result);
		self::assertEquals($expression, (string)$result);
	}

	
	public function testParseWithDayOfMonth() {
		$expression = 'DayOfMonth = 13,15';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		var_dump($result);
		self::assertInstanceOf('ToDate\Condition\DayOfMonthCondition', $result);
		self::assertEquals($expression, (string)$result);
	}

	public function testParseWithDayOfWeek() {
		$expression = 'DayOfWeek = MON,FRI';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		self::assertInstanceOf('ToDate\Condition\DayOfWeekCondition', $result);
		self::assertEquals($expression, (string)$result);
	}
	
	public function testParseWithDayOfWeekOfMonth() {
		$expression = 'DayOfWeekOfMonth = 1,3FRI';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		self::assertInstanceOf('ToDate\Condition\DayOfWeekOfMonthCondition', $result);
		self::assertEquals($expression, (string)$result);
	}
	
	public function testParseWithDayAndMonth() {
		$expression = 'DayAndMonth = 6/12';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		self::assertInstanceOf('ToDate\Condition\DayAndMonthCondition', $result);
		self::assertEquals($expression, (string)$result);
	}


	public function testParseWithMonthRange() {
		$expression = 'Month = 3-10';
		$expectedExpression = 'Month = 3,4,5,6,7,8,9,10';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		self::assertInstanceOf('ToDate\Condition\MonthCondition', $result);
		self::assertEquals($expectedExpression, (string)$result);
	}
	
	public function testParseWithYearRange() {
		$expression = 'Year = 2012-2014';
		$expectedExpression = 'Year = 2012,2013,2014';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		self::assertInstanceOf('ToDate\Condition\YearCondition', $result);
		self::assertEquals($expectedExpression, (string)$result);
	}


	public function testParseWithFeature() {
		$expression = '"z" = 123';
		$expectedExpression = '"z" = 123';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		self::assertInstanceOf('ToDate\Condition\FeatureInSetCondition', $result);
		self::assertEquals($expectedExpression, (string)$result);
	}
	

	public function testParseWithIntersection() {
		$expression = 'Month = 3-10 AND DayOfWeekOfMonth = -1SAT';
		$expectedExpression = '(Month = 3,4,5,6,7,8,9,10) AND (DayOfWeekOfMonth = -1SAT)';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		self::assertInstanceOf('ToDate\Condition\IntersectionCondition', $result);
		self::assertEquals($expectedExpression, (string)$result);
	}
	
	public function testParseWithUnion() {
		$expression = 'DayOfWeekOfMonth = 2FRI OR DayOfWeekOfMonth = -1SAT';
		$expectedExpression = '(DayOfWeekOfMonth = 2FRI) OR (DayOfWeekOfMonth = -1SAT)';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		self::assertInstanceOf('ToDate\Condition\UnionCondition', $result);
		self::assertEquals($expectedExpression, (string)$result);
	}


	public function testParseComplexStuff() {
		$expression = '(Month = 3-10 AND DayOfWeekOfMonth = -1SAT) OR (NOT(Month=3-10) AND DayOfWeekOfMonth = 1FRI)';
		$expectedExpression = '((Month = 3,4,5,6,7,8,9,10) AND (DayOfWeekOfMonth = -1SAT)) OR ((NOT(Month = 3,4,5,6,7,8,9,10)) AND (DayOfWeekOfMonth = 1FRI))';
		$parser = new FormalDateExpressionParser($expression);
		$result = $parser->parse();
		self::assertInstanceOf('ToDate\Condition\UnionCondition', $result);
		self::assertEquals($expectedExpression, (string)$result);
	}

}

?>
