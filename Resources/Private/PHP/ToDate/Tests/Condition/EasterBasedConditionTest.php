<?php

namespace ToDate\Condition;

require_once TODATE_BASEDIR . '/ToDate/Condition/EasterBasedCondition.php';

/**
 * Test class for EasterBasedCondition.
 * Generated by PHPUnit on 2012-02-06 at 22:18:11.
 */
class EasterBasedConditionTest extends \PHPUnit_Framework_TestCase {


	/**
	 * @covers ToDate\Condition\EasterBasedCondition::contains
	 * @covers ToDate\Condition\AbstractDateCondition::normalizeDate
	 */
	public function testContainsFindsEaster2012() {
		$c = new EasterBasedCondition();
		self::assertFalse($c->contains(new \DateTime('2012-04-07')));
		self::assertFalse($c->contains(new \DateTime('2012-04-09')));
		self::assertFalse($c->contains(new \DateTime('2012-04-01')));
		self::assertTrue($c->contains(new \DateTime('2012-04-08')));

	}

	/**
	 * @covers ToDate\Condition\EasterBasedCondition::__construct
	 * @covers ToDate\Condition\EasterBasedCondition::__toString
	 */
	public function testToStringWithEasterSunday() {
		$c = new EasterBasedCondition();
		self::assertEquals('Easter', (string)$c);
	}
	
	/**
	 * @covers ToDate\Condition\EasterBasedCondition::__construct
	 * @covers ToDate\Condition\EasterBasedCondition::__toString
	 */
	public function testToStringWithHolyFriday() {
		$c = new EasterBasedCondition(-2);
		self::assertEquals('Easter-2', (string)$c);
	}
	
	/**
	 * @covers ToDate\Condition\EasterBasedCondition::__construct
	 * @covers ToDate\Condition\EasterBasedCondition::__toString
	 */
	public function testToStringWithEasterMonday() {
		$c = new EasterBasedCondition(1);
		self::assertEquals('Easter+1', (string)$c);
	}
	
}

?>
