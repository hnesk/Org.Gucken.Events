<?php

namespace ToDate\Condition;

require_once TODATE_BASEDIR . '/ToDate/Condition/UnionCondition.php';
require_once TODATE_BASEDIR . '/ToDate/Condition/AlwaysCondition.php';
require_once TODATE_BASEDIR . '/ToDate/Condition/NeverCondition.php';

/**
 * Test class for UnionCondition.
 * Generated by PHPUnit on 2012-02-06 at 22:18:11.
 */
class UnionConditionTest extends \PHPUnit_Framework_TestCase {

	/**
	 *
	 * @var \DateTime
	 */
	protected $testDate;

	public function setUp() {
		$this->testDate = new \DateTime('2012-04-07');
	}
	
	/**
	 * @covers ToDate\Condition\UnionCondition::evaluate
	 */
	public function testContainsTrueWithNeverOrAlways() {
		$c = new UnionCondition(new NeverCondition(),new AlwaysCondition());
		self::assertTrue($c->contains($this->testDate));
	}
	
	/**
	 * @covers ToDate\Condition\UnionCondition::evaluate
	 */
	public function testContainsTrueWithAlwaysOrAlways() {
		$c = new UnionCondition(new AlwaysCondition(),new AlwaysCondition());
		self::assertTrue($c->contains($this->testDate));
	}
	
	/**
	 * @covers ToDate\Condition\UnionCondition::evaluate
	 */
	public function testContainsTrueWithAlwaysOrNever() {
		$c = new UnionCondition(new AlwaysCondition(),new NeverCondition());
		self::assertTrue($c->contains($this->testDate));

	}
	
	/**
	 * @covers ToDate\Condition\UnionCondition::evaluate
	 * @covers ToDate\Condition\AbstractLogicCondition::contains
	 */
	public function testContainsFalseWithNeverOrNever() {
		$c = new UnionCondition(new NeverCondition(),new NeverCondition());
		self::assertFalse($c->contains($this->testDate));
	}
	

	/**
	 * @covers ToDate\Condition\UnionCondition::__toString
	 * @covers ToDate\Condition\AbstractLogicCondition::__construct
	 */
	public function testToString() {
		$c = new UnionCondition(new AlwaysCondition(),new NeverCondition());
		self::assertEquals('(Always) OR (Never)', (string)$c);
	}
	
}

?>
