<?php

namespace ToDate\Condition;

require_once TODATE_BASEDIR . '/ToDate/Condition/DayOfMonthCondition.php';

/**
 * Test class for DayOfMonthCondition.
 * Generated by PHPUnit on 2012-02-06 at 22:18:11.
 */
class DayOfMonthConditionTest extends \PHPUnit_Framework_TestCase {


	/**
	 * @covers ToDate\Condition\DayOfMonthCondition::contains
	 * @covers ToDate\Condition\AbstractDateCondition::normalizeDate
	 */
	public function testContainsFindsSingleDay() {
		$c = new DayOfMonthCondition(3);
		self::assertFalse($c->contains(new \DateTime('2012-04-04')));
		self::assertFalse($c->contains(new \DateTime('2012-04-02')));
		self::assertTrue($c->contains(new \DateTime('2012-04-03')));
	}
	
	/**
	 * @covers ToDate\Condition\DayOfMonthCondition::contains
	 * @covers ToDate\Condition\AbstractDateCondition::normalizeDate
	 * @covers ToDate\Condition\AbstractDateCondition::toArray
	 */
	public function testContainsFindsMultipleDays() {
		$c = new DayOfMonthCondition(array(3,10));
		self::assertFalse($c->contains(new \DateTime('2012-04-04')));
		self::assertFalse($c->contains(new \DateTime('2012-04-02')));
		self::assertTrue($c->contains(new \DateTime('2012-04-03')));
		self::assertFalse($c->contains(new \DateTime('2012-04-11')));
		self::assertFalse($c->contains(new \DateTime('2012-04-09')));
		self::assertTrue($c->contains(new \DateTime('2012-04-10')));

	}
	
	
	/**
	 * @covers ToDate\Condition\DayOfMonthCondition::__construct
	 * @covers ToDate\Condition\DayOfMonthCondition::__toString
	 * @covers ToDate\Condition\AbstractDateCondition::toArray
	 */
	public function testToStringWithDayRange() {
		$c = new DayOfMonthCondition('3-10,31');
		self::assertEquals('DayOfMonth = 3,4,5,6,7,8,9,10,31', (string)$c);
	}
	
	
	/**
	 * @covers ToDate\Condition\DayOfMonthCondition::__construct
	 * @covers ToDate\Condition\FeatureInSetCondition::__construct
	 * @covers ToDate\Condition\FeatureInSetCondition::__toString
	 * @covers ToDate\Condition\AbstractDateCondition::toArray
	 */
	public function testToStringWithInvertedDayRange() {
		$c = new DayOfMonthCondition('10-3,31');
		self::assertEquals('DayOfMonth = 3,4,5,6,7,8,9,10,31', (string)$c);
	}

	
	/**
	 * @covers ToDate\Condition\DayOfMonthCondition::__construct
	 * @covers ToDate\Condition\AbstractDateCondition::toArray
	 * @expectedException \InvalidArgumentException
	 */
	public function testToConstructorThrownsExceptionWithBrokenRange() {
		new DayOfMonthCondition('1-murks,31');
	}



	/**
	 * @covers ToDate\Condition\DayOfMonthCondition::__construct
	 * @covers ToDate\Condition\DayOfMonthCondition::__toString
	 */
	public function testToStringWithMultipleDays() {
		$c = new DayOfMonthCondition(array(3,10));
		self::assertEquals('DayOfMonth = 3,10', (string)$c);
	}

	/**
	 * @covers ToDate\Condition\DayOfMonthCondition::__construct
	 * @covers ToDate\Condition\DayOfMonthCondition::__toString
	 */
	public function testToStringWithSingleDay() {
		$c = new DayOfMonthCondition(3);
		self::assertEquals('DayOfMonth = 3', (string)$c);
	}
	
	
}

?>
